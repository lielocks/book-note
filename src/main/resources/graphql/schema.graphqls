schema {
    query: Query,
    mutation: Mutation
}

type Query {
    getNoteListByUserId: [NoteResponseDto!]!
    getUserBookList: [UserBookListResponseDto!]!
}

type Mutation {
    fetchAndSaveBook(isbn: String!): Book
    userLikeBook(UserLikeBookInput: UserLikeBookInput!): String
    registerNote(NoteRegisterInput: NoteRegisterInput!): NoteResponseDto
    updateNote(NoteUpdateInput: NoteUpdateInput!): NoteResponseDto
    softDeleteNote(NoteSoftDeleteDto: NoteSoftDeleteDto!): NoteResponseDto
    hardDeleteNote(noteId: Int!): String
}

type Book {
    id: ID!
    title: String!
    link: String
    author: String!
    discount: String
    publisher: String!
    pubdate: String
    isbn: String!
    description: String
}

input UserLikeBookInput {
    userId: Int!,
    bookId: Int!
}

input NoteSoftDeleteDto {
    userId: Int!,
    noteId: Int!,
    deleted: Boolean!
}

input NoteRegisterInput {
    bookId: Int!,
    content: String!
}

type NoteResponseDto {
    noteId: Int!
    content: String!
    isDeleted: Boolean!
    createdAt: String
    updatedAt: String
    bookId: Int!
}

input NoteUpdateInput {
    noteId: Int!
    content: String!
}

type UserBookListResponseDto {
    id: Int!
    title: String!
    link: String
    author: String!
    discount: String
    publisher: String!
    pubdate: String
    isbn: String!
    description: String
}